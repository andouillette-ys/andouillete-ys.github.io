{"data":{"site":{"siteMetadata":{"title":"Gandalf The Blue","author":"ys"}},"markdownRemark":{"id":"8c2bdccd-6e05-5166-b570-f80a23212537","html":"<p>原文链接: <a href=\"https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/\">A (Mostly) Complete Guide to React Rendering Behavior</a></p>\n<p><em>该文详细列举了React的渲染行为以及Context和React-Redux的使用是如何影响渲染的</em></p>\n<h1 id=\"目录\"><a href=\"#%E7%9B%AE%E5%BD%95\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目录</h1>\n<h1 id=\"什么是渲染\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B8%B2%E6%9F%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么是”渲染”?</h1>\n<p><strong>渲染</strong>是React要求您的组件根据当前属性和状态来描述该组件希望其UI部分看起来是什么样子的过程。</p>\n<h2 id=\"渲染过程概览\"><a href=\"#%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B%E6%A6%82%E8%A7%88\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>渲染过程概览</h2>\n<p>在渲染过程中，React将从组件树的根开始，然后向下循环以查找被标记为需要更新的所有组件。 对于每个被标记的组件，React将调用<code class=\"language-text\">classComponentInstance.render()</code>(类组件)或<code class=\"language-text\">FunctionComponent()</code>(函数组件)，并保存渲染输出。</p>\n<p>组件的渲染输出通常以JSX语法编写，然后在编译并准备部署JS时将其转换为<code class=\"language-text\">React.createElement()</code>调用。 <code class=\"language-text\">createElement</code>返回React元素，它们是描述UI结构的普通JS对象。 举例如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 这里的JSX语法:</span>\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SomeComponent</span> <span class=\"token attr-name\">a</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">42</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">b</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>testing<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Text here</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SomeComponent</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">// 被转换成了下面的调用:</span>\n<span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>SomeComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">\"testing\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Text Here\"</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"></span><span class=\"token comment\">// 然后成为了下面的元素对象:</span>\n<span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> SomeComponent<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">\"testing\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Text Here\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>从整个组件树中收集了渲染输出之后，React将比较新旧对象树（通常称为“虚拟DOM”），并收集所有需要被应用到DOM的更新使得真实的DOM看起来更像当前所需的输出。 这里的差异计算过程(diff)称为“一致性比较”(Reconciliation)。</p>\n<p>然后，React在一个同步更新中将所有计算出的更改应用于真实DOM。</p>\n<h2 id=\"渲染和提交阶段\"><a href=\"#%E6%B8%B2%E6%9F%93%E5%92%8C%E6%8F%90%E4%BA%A4%E9%98%B6%E6%AE%B5\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>渲染和提交阶段</h2>\n<p>React团队在概念上将这项工作分为两个阶段：</p>\n<ul>\n<li>“渲染阶段”包含渲染组件和计算更改的所有工作</li>\n<li>“提交阶段”是将这些更改应用于DOM的过程</li>\n</ul>\n<p>React在提交阶段更新了DOM之后，它随后同步运行<code class=\"language-text\">componentDidMount</code>和<code class=\"language-text\">componentDidUpdate</code>类生命周期方法以及<code class=\"language-text\">useLayoutEffect</code> hooks。</p>\n<p>然后，React设置一个短暂的timeout，并在超时后运行所有<code class=\"language-text\">useEffect</code> hooks。</p>\n<p>您可以在<a href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">这张出色的React生命周期方法图</a>中看到类生命周期方法的可视化呈现。(目前没有展示<code class=\"language-text\">effect hooks</code>的运行时机，希望未来能够加上。)</p>","timeToRead":1,"frontmatter":{"title":"关于React渲染行为(绝大多数)的完整指南","date":"June 22, 2020"},"fields":{"slug":"/a-mostly-complete-guide-to-react-rendering-behavior/","langKey":"en"}}},"pageContext":{"slug":"/a-mostly-complete-guide-to-react-rendering-behavior/","previous":{"fields":{"slug":"/on-let-vs-const/","langKey":"en","directoryName":"on-let-vs-const"},"frontmatter":{"title":"let还是const"}},"next":null,"translations":[]}}