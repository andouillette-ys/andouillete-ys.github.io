{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"39f73ad6-81d9-55f3-ac1b-d411534994d5","html":"<p>Vraj s√∫ v Reacte <a href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks</a> trendy. Ale blog zaƒç√≠nam vysvetlen√≠m ako funguj√∫ komponenty vytvoren√© pomocou <em>tried</em>.</p>\n<p><strong>Tieto veci <em>nie</em> s√∫ d√¥le≈æit√© na to aby ste boli produkt√≠vni pri pou≈æ√≠van√≠ Reactu. Ale budete radi ak viete ako veci funguj√∫.</strong></p>\n<p>Tu je prv√Ω pr√≠spevok.</p>\n<hr>\n<p>Do k√≥du som nap√≠sal <code class=\"language-text\">super(props)</code> toƒæko kr√°t, ≈æe u≈æ to ani ner√°tam:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Samozrejme, nemus√≠me to robi≈•, keƒè pou≈æijeme <a href=\"https://github.com/tc39/proposal-class-fields\">vlastnosti tried</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Podobn√° syntax bola <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers\">napl√°novan√°</a> e≈°te keƒè React 0.13 pridal podporu pre triedy v roku 2015. Pou≈æitie kon≈°truktora a <code class=\"language-text\">super(props)</code> bolo len doƒçasn√Ωm rie≈°en√≠m dok√Ωm vlastnosti tried neposkytli pohodlnej≈°iu alternat√≠vu.</p>\n<p>Ale vr√°≈•me sa k pr√≠kladu, ktor√Ω pou≈æ√≠va iba funkcie ≈°tandardu ES2015:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Preƒço vlastne pou≈æ√≠vame funkciu <code class=\"language-text\">super</code>? M√¥≈æeme ju <em>ne</em>pou≈æi≈•? Ak ju mus√≠me pou≈æ√≠va≈•, ƒço sa stane ak jej neposkytneme <code class=\"language-text\">props</code>? Pou≈æ√≠vaj√∫ sa aj in√© parametre?</strong> Pozrime sa na to.</p>\n<hr>\n<p>V JavaScripte je funkcia <code class=\"language-text\">super</code> kon≈°truktor triedy, ktor√∫ roz≈°irujeme. (V tomto pr√≠klade sa jedn√° o implement√°ciu <code class=\"language-text\">React.Component</code>.)</p>\n<p>Je d√¥le≈æit√© vedie≈•, ≈æe v kon≈°truktore nem√¥≈æete pou≈æ√≠va≈• <code class=\"language-text\">this</code> <em>a≈æ pok√Ωm</em> ste nepou≈æili funkciu <code class=\"language-text\">super</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// üî¥ Nem√¥≈æeme pou≈æ√≠va≈• `this`</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ‚úÖ A≈æ teraz to m√¥≈æeme pou≈æ√≠va≈•</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Existuje dobr√Ω d√¥vod preƒço JavaScript chce, aby ste pou≈æili kon≈°truktor roz≈°irovanej triedy predt√Ωm, ne≈æ pou≈æijete <code class=\"language-text\">this</code>. Predstavme si tak√∫ hierarchiu:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PolitePerson</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// üî¥ Toto sa nesmie</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Dobr√© r√°no, priatelia!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Teraz si predstavme, ≈æe pou≈æijeme <code class=\"language-text\">this</code> pred funkciou <code class=\"language-text\">super</code>. O mesiac nesk√¥r chceme zmeni≈• funkciu <code class=\"language-text\">greetColleagues</code> tak, aby v spr√°ve bolo meno dotyƒçnej osoby:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Dobr√© r√°no, priatelia!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Vol√°m sa '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">', r√°d V√°s spozn√°vam!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ale zabudli sme, ≈æe funkcia <code class=\"language-text\">this.greetColleagues()</code> bola pou≈æit√° predt√Ωm, ne≈æ funkcia <code class=\"language-text\">super()</code> definovala vlastnos≈• <code class=\"language-text\">this.name</code>. To znamen√°, ≈æe vlastnos≈• <code class=\"language-text\">this.name</code> nie je definovan√°! Ako vid√≠te, pri takom k√≥de sa veƒæmi ≈•a≈æko rozm√Ω≈°ƒæa.</p>\n<p>Aby sme sa tomu vyhli, <strong>JavaScript chce, aby ste pou≈æili <code class=\"language-text\">super</code> <em>predt√Ωm</em>, ne≈æ pou≈æijete¬†<code class=\"language-text\">this</code>.</strong> Nech si trieda, ktor√° bola roz≈°√≠ren√°, rob√≠ ƒço len chce! To obmedzenie plat√≠ aj na komponenty, ktor√© s√∫ definovan√© pomocou tried:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ‚úÖ A≈æ teraz m√¥≈æeme pou≈æ√≠va≈• `this`</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Teraz m√°me ƒèal≈°iu ot√°zku: preƒço funkcii <code class=\"language-text\">super</code> poskytujeme <code class=\"language-text\">props</code>?</p>\n<hr>\n<p>M√¥≈æete si myslie≈•, ≈æe  aby mohol kon≈°truktor triedy <code class=\"language-text\">React.Component</code> nastavi≈• <code class=\"language-text\">this.props</code>, mus√≠me poskytn√∫≈• funkcii <code class=\"language-text\">super</code> parameter <code class=\"language-text\">props</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Vo vn√∫tri Reactu</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A neboli by ste ƒèaleko od pravdy ‚Äî <a href=\"https://github.com/facebook/react/blob/1d25aa5787d4e19704c049c3cfa985d3b5190e0d/packages/react/src/ReactBaseClasses.js#L22\">aj sa to deje</a>.</p>\n<p>Ale aj keby ste pou≈æili funkciu <code class=\"language-text\">super()</code> bez parametra <code class=\"language-text\">props</code>, st√°le by ste vedeli pou≈æ√≠va≈• <code class=\"language-text\">this.props</code> v met√≥dach ako s√∫ <code class=\"language-text\">render</code> a podobne. (Never√≠te? Vysk√∫≈°ajte to!)</p>\n<p>Ako je mo≈æn√©, ≈æe <em>to</em> funguje? <strong>React nastavuje vlastnos≈• <code class=\"language-text\">props</code> hneƒè potom, ako pou≈æije <em>v√°≈°</em> kon≈°truktor:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token comment\">// Vo vn√∫tri Reactu</span>\n  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  instance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tak≈æe aj keƒè zabudnete poskytn√∫≈• <code class=\"language-text\">props</code> funkcii <code class=\"language-text\">super()</code>, React ich nastav√≠. A je na to aj d√¥vod.</p>\n<p>Keƒè React pridal podporu pre triedy, nepridal podporu iba pre ES6. Cieƒæom bolo prida≈• podporu pre ƒço najviac abstrakci√≠ tried. A vtedy <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages\">nebolo jasn√©</a>, ako √∫spe≈°n√© bud√∫ jazyky ako s√∫ ClojureScript, CoffeeScript, ES6, Fable, Scala.js alebo TypeScript. Tak≈æe React bol z√°merne nestrann√Ω, a nevy≈æadoval pou≈æitie funkcie <code class=\"language-text\">super()</code> ‚Äî aj keƒè s√∫ triedy ≈°tandardu ES6 in√©.</p>\n<p>Znamen√° to, ≈æe m√¥≈æeme pou≈æi≈• <code class=\"language-text\">super()</code> namiesto <code class=\"language-text\">super(props)</code>?</p>\n<p><strong>Ani nie, preto≈æe je to st√°le m√§t√∫ce.</strong> √Åno, React nastav√≠ <code class=\"language-text\">this.props</code> <em>potom</em> ako bol v√°≈° kon≈°truktor spusten√Ω. Ale <code class=\"language-text\">this.props</code> st√°le nie je definovan√Ω <em>od</em> pou≈æitia funkcie <code class=\"language-text\">super</code> <em>a≈æ</em> po koniec kon≈°truktora:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Vo vn√∫tri Reactu</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Vo va≈°om k√≥de</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// üò¨ Zabudli sme na props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ‚úÖ {}</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// üò¨ undefined </span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A je v√Ωzvou opravi≈• chybu, ktor√° nastane v nejakej funkcii, ktor√° je pou≈æit√° <em>v kon≈°truktore</em>. <strong>Pr√°ve preto v≈ædy odpor√∫ƒçam pou≈æ√≠va≈• <code class=\"language-text\">super(props)</code>, aj keƒè to nie je nevyhnutn√©:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ‚úÖ Posktyli sme props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ‚úÖ {}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ‚úÖ {}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vƒèaka tomu bude <code class=\"language-text\">this.props</code> dostupn√Ω e≈°te predt√Ωm, ne≈æ bude kon≈°truktor ukonƒçen√Ω.</p>\n<hr>\n<p>Tu je e≈°te jedna vec o ktor√∫ sa m√¥≈æu dlhodob√≠ pou≈æ√≠vatelia Reactu zauj√≠ma≈•.</p>\n<p>Mohli ste si v≈°imn√∫≈•, ≈æe keƒè v triedach pou≈æijete Context API (ƒçi u≈æ pomocou zastaral√©ho API <code class=\"language-text\">contextTypes</code> alebo modern√©ho API <code class=\"language-text\">contextType</code>, pridan√©ho v Reacte 16.6), <code class=\"language-text\">context</code> je druh√Ωm parametrom kon≈°truktora.</p>\n<p>Preƒço teda nepou≈æ√≠vame <code class=\"language-text\">super(props, context)</code>? M√¥≈æeme, ale <code class=\"language-text\">context</code> sa nepou≈æ√≠va a≈æ tak ƒçasto.</p>\n<p><strong>Aj tak je vƒèaka vlastnostiam triedy tento probl√©m vyrie≈°en√Ω.</strong> Bez dan√©ho kon≈°truktora s√∫ v≈°etky parametre dan√© roz≈°irovanej funkcii. Kv√¥li tomu m√¥≈æe <code class=\"language-text\">state = {}</code> pou≈æi≈• <code class=\"language-text\">this.props</code> alebo <code class=\"language-text\">this.context</code>.</p>\n<p>Keƒè pou≈æ√≠vame Hooks, nepou≈æ√≠vame ani <code class=\"language-text\">super</code>, ani <code class=\"language-text\">this</code>. Ale to je t√©ma do bud√∫cna.</p>","timeToRead":5,"frontmatter":{"title":"Preƒço pou≈æ√≠vame super(props)?","date":"November 30, 2018","spoiler":"Koniec bude prekvapuj√∫ci."},"fields":{"slug":"/sk/why-do-we-write-super-props/","langKey":"sk"}}},"pageContext":{"slug":"/sk/why-do-we-write-super-props/","translations":["es","it","pt-br","sk","fr","hu","ja","my","th","tr","vi"]}}